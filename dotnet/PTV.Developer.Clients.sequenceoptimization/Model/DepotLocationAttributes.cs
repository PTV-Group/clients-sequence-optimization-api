/*
 * Sequence Optimization
 *
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.sequenceoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.sequenceoptimization.Model
{
    /// <summary>
    /// Attributes for a location of type DEPOT.
    /// </summary>
    [DataContract(Name = "DepotLocationAttributes")]
    public partial class DepotLocationAttributes : IEquatable<DepotLocationAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepotLocationAttributes" /> class.
        /// </summary>
        /// <param name="serviceTimePerPickupStop">The service time [s] that is required each time this location is visited in order to pick up goods. The location-dependent service time represents, for example, the time to enter the premises or to register at a depot. Besides a location-dependent service time, the user may specify an additional transport-dependent service time at the transports. (default to 0).</param>
        /// <param name="serviceTimePerDeliveryStop">The service time [s] that is required each time this location is visited in order to deliver goods. The location-dependent service time represents, for example, the time to enter the premises or to register at a depot. Besides a location-dependent service time, the user may specify an additional transport-dependent service time at the transports. (default to 0).</param>
        public DepotLocationAttributes(int serviceTimePerPickupStop = 0, int serviceTimePerDeliveryStop = 0)
        {
            this.ServiceTimePerPickupStop = serviceTimePerPickupStop;
            this.ServiceTimePerDeliveryStop = serviceTimePerDeliveryStop;
        }

        /// <summary>
        /// The service time [s] that is required each time this location is visited in order to pick up goods. The location-dependent service time represents, for example, the time to enter the premises or to register at a depot. Besides a location-dependent service time, the user may specify an additional transport-dependent service time at the transports.
        /// </summary>
        /// <value>The service time [s] that is required each time this location is visited in order to pick up goods. The location-dependent service time represents, for example, the time to enter the premises or to register at a depot. Besides a location-dependent service time, the user may specify an additional transport-dependent service time at the transports.</value>
        [DataMember(Name = "serviceTimePerPickupStop", EmitDefaultValue = false)]
        public int ServiceTimePerPickupStop { get; set; }

        /// <summary>
        /// The service time [s] that is required each time this location is visited in order to deliver goods. The location-dependent service time represents, for example, the time to enter the premises or to register at a depot. Besides a location-dependent service time, the user may specify an additional transport-dependent service time at the transports.
        /// </summary>
        /// <value>The service time [s] that is required each time this location is visited in order to deliver goods. The location-dependent service time represents, for example, the time to enter the premises or to register at a depot. Besides a location-dependent service time, the user may specify an additional transport-dependent service time at the transports.</value>
        [DataMember(Name = "serviceTimePerDeliveryStop", EmitDefaultValue = false)]
        public int ServiceTimePerDeliveryStop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DepotLocationAttributes {\n");
            sb.Append("  ServiceTimePerPickupStop: ").Append(ServiceTimePerPickupStop).Append("\n");
            sb.Append("  ServiceTimePerDeliveryStop: ").Append(ServiceTimePerDeliveryStop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DepotLocationAttributes);
        }

        /// <summary>
        /// Returns true if DepotLocationAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of DepotLocationAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepotLocationAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ServiceTimePerPickupStop == input.ServiceTimePerPickupStop ||
                    this.ServiceTimePerPickupStop.Equals(input.ServiceTimePerPickupStop)
                ) && 
                (
                    this.ServiceTimePerDeliveryStop == input.ServiceTimePerDeliveryStop ||
                    this.ServiceTimePerDeliveryStop.Equals(input.ServiceTimePerDeliveryStop)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ServiceTimePerPickupStop.GetHashCode();
                hashCode = (hashCode * 59) + this.ServiceTimePerDeliveryStop.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ServiceTimePerPickupStop (int) minimum
            if (this.ServiceTimePerPickupStop < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServiceTimePerPickupStop, must be a value greater than or equal to 0.", new [] { "ServiceTimePerPickupStop" });
            }

            // ServiceTimePerDeliveryStop (int) minimum
            if (this.ServiceTimePerDeliveryStop < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServiceTimePerDeliveryStop, must be a value greater than or equal to 0.", new [] { "ServiceTimePerDeliveryStop" });
            }

            yield break;
        }
    }

}
