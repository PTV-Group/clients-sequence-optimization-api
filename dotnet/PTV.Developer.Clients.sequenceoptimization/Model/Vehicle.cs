/*
 * Sequence Optimization
 *
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.sequenceoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.sequenceoptimization.Model
{
    /// <summary>
    /// The vehicle used to transport goods.
    /// </summary>
    [DataContract(Name = "Vehicle")]
    public partial class Vehicle : IEquatable<Vehicle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        /// <param name="capacities">The list of capacities for the different quantity dimensions of goods that can be transported. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and the vehicle. If and only if this list of capacities is empty for the given vehicle, the quantities of each transport must be empty..</param>
        /// <param name="profile">The profile defines attributes of the vehicle relevant to determine travel times and distances between any two locations.   Default profile is _EUR_VAN_. See [here](./concepts/profiles-and-countries) for a complete list of allowed values. (default to &quot;EUR_VAN&quot;).</param>
        /// <param name="startLocationId">ID of the vehicle&#39;s start location. If vehicle&#39;s start location does not coincide with the location of the first pickup, only the coordinates of vehicle&#39;s start location are considered and all other attributes such as opening intervals, service time or type are ignored. If no start location is specified, it is assumed that the vehicle is available at the first stop..</param>
        /// <param name="endLocationId">ID of the vehicle&#39;s end location. If vehicle&#39;s end location does not coincide with the location of the last delivery, only the coordinates of vehicle&#39;s end location are considered and all other attributes such as opening intervals, service time or type are ignored. If no end location is specified, it is assumed that the vehicle remains at the last stop..</param>
        public Vehicle(List<int> capacities = default(List<int>), string profile = "EUR_VAN", string startLocationId = default(string), string endLocationId = default(string))
        {
            this.Capacities = capacities;
            // use default value if no "profile" provided
            this.Profile = profile ?? "EUR_VAN";
            this.StartLocationId = startLocationId;
            this.EndLocationId = endLocationId;
        }

        /// <summary>
        /// The list of capacities for the different quantity dimensions of goods that can be transported. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and the vehicle. If and only if this list of capacities is empty for the given vehicle, the quantities of each transport must be empty.
        /// </summary>
        /// <value>The list of capacities for the different quantity dimensions of goods that can be transported. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and the vehicle. If and only if this list of capacities is empty for the given vehicle, the quantities of each transport must be empty.</value>
        [DataMember(Name = "capacities", EmitDefaultValue = false)]
        public List<int> Capacities { get; set; }

        /// <summary>
        /// The profile defines attributes of the vehicle relevant to determine travel times and distances between any two locations.   Default profile is _EUR_VAN_. See [here](./concepts/profiles-and-countries) for a complete list of allowed values.
        /// </summary>
        /// <value>The profile defines attributes of the vehicle relevant to determine travel times and distances between any two locations.   Default profile is _EUR_VAN_. See [here](./concepts/profiles-and-countries) for a complete list of allowed values.</value>
        [DataMember(Name = "profile", EmitDefaultValue = false)]
        public string Profile { get; set; }

        /// <summary>
        /// ID of the vehicle&#39;s start location. If vehicle&#39;s start location does not coincide with the location of the first pickup, only the coordinates of vehicle&#39;s start location are considered and all other attributes such as opening intervals, service time or type are ignored. If no start location is specified, it is assumed that the vehicle is available at the first stop.
        /// </summary>
        /// <value>ID of the vehicle&#39;s start location. If vehicle&#39;s start location does not coincide with the location of the first pickup, only the coordinates of vehicle&#39;s start location are considered and all other attributes such as opening intervals, service time or type are ignored. If no start location is specified, it is assumed that the vehicle is available at the first stop.</value>
        [DataMember(Name = "startLocationId", EmitDefaultValue = false)]
        public string StartLocationId { get; set; }

        /// <summary>
        /// ID of the vehicle&#39;s end location. If vehicle&#39;s end location does not coincide with the location of the last delivery, only the coordinates of vehicle&#39;s end location are considered and all other attributes such as opening intervals, service time or type are ignored. If no end location is specified, it is assumed that the vehicle remains at the last stop.
        /// </summary>
        /// <value>ID of the vehicle&#39;s end location. If vehicle&#39;s end location does not coincide with the location of the last delivery, only the coordinates of vehicle&#39;s end location are considered and all other attributes such as opening intervals, service time or type are ignored. If no end location is specified, it is assumed that the vehicle remains at the last stop.</value>
        [DataMember(Name = "endLocationId", EmitDefaultValue = false)]
        public string EndLocationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Vehicle {\n");
            sb.Append("  Capacities: ").Append(Capacities).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  StartLocationId: ").Append(StartLocationId).Append("\n");
            sb.Append("  EndLocationId: ").Append(EndLocationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Vehicle);
        }

        /// <summary>
        /// Returns true if Vehicle instances are equal
        /// </summary>
        /// <param name="input">Instance of Vehicle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vehicle input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Capacities == input.Capacities ||
                    this.Capacities != null &&
                    input.Capacities != null &&
                    this.Capacities.SequenceEqual(input.Capacities)
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.StartLocationId == input.StartLocationId ||
                    (this.StartLocationId != null &&
                    this.StartLocationId.Equals(input.StartLocationId))
                ) && 
                (
                    this.EndLocationId == input.EndLocationId ||
                    (this.EndLocationId != null &&
                    this.EndLocationId.Equals(input.EndLocationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Capacities != null)
                {
                    hashCode = (hashCode * 59) + this.Capacities.GetHashCode();
                }
                if (this.Profile != null)
                {
                    hashCode = (hashCode * 59) + this.Profile.GetHashCode();
                }
                if (this.StartLocationId != null)
                {
                    hashCode = (hashCode * 59) + this.StartLocationId.GetHashCode();
                }
                if (this.EndLocationId != null)
                {
                    hashCode = (hashCode * 59) + this.EndLocationId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StartLocationId (string) pattern
            Regex regexStartLocationId = new Regex(@".*[^ ].*", RegexOptions.CultureInvariant);
            if (false == regexStartLocationId.Match(this.StartLocationId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartLocationId, must match a pattern of " + regexStartLocationId, new [] { "StartLocationId" });
            }

            // EndLocationId (string) pattern
            Regex regexEndLocationId = new Regex(@".*[^ ].*", RegexOptions.CultureInvariant);
            if (false == regexEndLocationId.Match(this.EndLocationId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndLocationId, must match a pattern of " + regexEndLocationId, new [] { "EndLocationId" });
            }

            yield break;
        }
    }

}
