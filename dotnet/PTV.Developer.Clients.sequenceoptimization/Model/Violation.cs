/*
 * Sequence Optimization
 *
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.6
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.sequenceoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.sequenceoptimization.Model
{
    /// <summary>
    /// Specifies a violation of a route.
    /// </summary>
    [DataContract(Name = "Violation")]
    public partial class Violation : IEquatable<Violation>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public ViolationType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Violation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Violation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Violation" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="timeExceedance">Specifies a violation that involves a time limit: Time by which the limit is exceeded. Is only filled for the following violation types: _ROUTE_START_INTERVAL_, DRIVER_AVAILABILITY, OPENING_INTERVAL, MAXIMUM_TRAVEL_TIME_OF_DRIVER and MAXIMUM_DRIVING_TIME_OF_DRIVER..</param>
        /// <param name="distanceExceedance">Specifies a violation that involves a distance limit: Distance by which the limit is exceeded. Is only filled for the following violation type: _MAXIMUM_DISTANCE_..</param>
        /// <param name="capacityExceedance">Specifies a violation of the capacities of the used vehicle: Exceedance of the capacity in each quantity dimension of goods. Is only filled for the following violation types: VEHICLE_CAPACITY..</param>
        public Violation(ViolationType type = default(ViolationType), int timeExceedance = default(int), int distanceExceedance = default(int), List<int> capacityExceedance = default(List<int>))
        {
            this.Type = type;
            this.TimeExceedance = timeExceedance;
            this.DistanceExceedance = distanceExceedance;
            this.CapacityExceedance = capacityExceedance;
        }

        /// <summary>
        /// Specifies a violation that involves a time limit: Time by which the limit is exceeded. Is only filled for the following violation types: _ROUTE_START_INTERVAL_, DRIVER_AVAILABILITY, OPENING_INTERVAL, MAXIMUM_TRAVEL_TIME_OF_DRIVER and MAXIMUM_DRIVING_TIME_OF_DRIVER.
        /// </summary>
        /// <value>Specifies a violation that involves a time limit: Time by which the limit is exceeded. Is only filled for the following violation types: _ROUTE_START_INTERVAL_, DRIVER_AVAILABILITY, OPENING_INTERVAL, MAXIMUM_TRAVEL_TIME_OF_DRIVER and MAXIMUM_DRIVING_TIME_OF_DRIVER.</value>
        [DataMember(Name = "timeExceedance", EmitDefaultValue = false)]
        public int TimeExceedance { get; set; }

        /// <summary>
        /// Specifies a violation that involves a distance limit: Distance by which the limit is exceeded. Is only filled for the following violation type: _MAXIMUM_DISTANCE_.
        /// </summary>
        /// <value>Specifies a violation that involves a distance limit: Distance by which the limit is exceeded. Is only filled for the following violation type: _MAXIMUM_DISTANCE_.</value>
        [DataMember(Name = "distanceExceedance", EmitDefaultValue = false)]
        public int DistanceExceedance { get; set; }

        /// <summary>
        /// Specifies a violation of the capacities of the used vehicle: Exceedance of the capacity in each quantity dimension of goods. Is only filled for the following violation types: VEHICLE_CAPACITY.
        /// </summary>
        /// <value>Specifies a violation of the capacities of the used vehicle: Exceedance of the capacity in each quantity dimension of goods. Is only filled for the following violation types: VEHICLE_CAPACITY.</value>
        [DataMember(Name = "capacityExceedance", EmitDefaultValue = false)]
        public List<int> CapacityExceedance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Violation {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TimeExceedance: ").Append(TimeExceedance).Append("\n");
            sb.Append("  DistanceExceedance: ").Append(DistanceExceedance).Append("\n");
            sb.Append("  CapacityExceedance: ").Append(CapacityExceedance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Violation);
        }

        /// <summary>
        /// Returns true if Violation instances are equal
        /// </summary>
        /// <param name="input">Instance of Violation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Violation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.TimeExceedance == input.TimeExceedance ||
                    this.TimeExceedance.Equals(input.TimeExceedance)
                ) && 
                (
                    this.DistanceExceedance == input.DistanceExceedance ||
                    this.DistanceExceedance.Equals(input.DistanceExceedance)
                ) && 
                (
                    this.CapacityExceedance == input.CapacityExceedance ||
                    this.CapacityExceedance != null &&
                    input.CapacityExceedance != null &&
                    this.CapacityExceedance.SequenceEqual(input.CapacityExceedance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.TimeExceedance.GetHashCode();
                hashCode = (hashCode * 59) + this.DistanceExceedance.GetHashCode();
                if (this.CapacityExceedance != null)
                {
                    hashCode = (hashCode * 59) + this.CapacityExceedance.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
