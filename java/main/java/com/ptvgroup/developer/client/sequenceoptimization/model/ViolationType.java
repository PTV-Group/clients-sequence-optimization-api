/*
 * Sequence Optimization
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.sequenceoptimization.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import io.swagger.annotations.ApiModel;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Specifies the type of violation.  * &#x60;DRIVER_AVAILABILITY&#x60; - The driver availability is violated.  * &#x60;OPENING_INTERVAL&#x60; - The opening intervals of the location are violated.  * &#x60;MAXIMUM_TRAVEL_TIME_OF_DRIVER&#x60; - Indicates a violation of the maximum allowed travel time of driver as specified by the drivers&#39; working hours restriction.  * &#x60;MAXIMUM_DRIVING_TIME_OF_DRIVER&#x60; - Indicates a violation of the maximum allowed driving time of driver as specified by the drivers&#39; working hours restriction.  * &#x60;VEHICLE_CAPACITY&#x60; - At least one of the vehicle capacities is violated.  * &#x60;STOP_POSITION&#x60; - Indicates a violation of the position of a stop.  * &#x60;ROUTE_SECTION&#x60; - Indicates a violation of the route section numbers of a customer stop.
 */
public enum ViolationType {
  
  DRIVER_AVAILABILITY("DRIVER_AVAILABILITY"),
  
  OPENING_INTERVAL("OPENING_INTERVAL"),
  
  MAXIMUM_TRAVEL_TIME_OF_DRIVER("MAXIMUM_TRAVEL_TIME_OF_DRIVER"),
  
  MAXIMUM_DRIVING_TIME_OF_DRIVER("MAXIMUM_DRIVING_TIME_OF_DRIVER"),
  
  VEHICLE_CAPACITY("VEHICLE_CAPACITY"),
  
  STOP_POSITION("STOP_POSITION"),
  
  ROUTE_SECTION("ROUTE_SECTION");

  private String value;

  ViolationType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static ViolationType fromValue(String value) {
    for (ViolationType b : ViolationType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

