/* tslint:disable */
/* eslint-disable */
/**
 * Sequence Optimization
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CausingError,
    CausingErrorFromJSON,
    CausingErrorFromJSONTyped,
    CausingErrorToJSON,
} from './CausingError';

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * A unique identifier of the corresponding trace forest. It can be used to trace errors by the support.
     * @type {string}
     * @memberof ErrorResponse
     */
    traceId: string;
    /**
     * A unique identifier specific to this error instance. It can be used to trace errors by the support.
     * @type {string}
     * @memberof ErrorResponse
     */
    errorId?: string;
    /**
     * A human readable message that describes the error.
     * @type {string}
     * @memberof ErrorResponse
     */
    description: string;
    /**
     * A constant string that can be used to identify this error class programmatically. An errorCode can have **details** to provide information in additional properties which are described with the code they apply to. They are of type string unless otherwise specified.
     * Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.
     * 
     * **HTTP status code: 400**  
     * * `GENERAL_VALIDATION_ERROR` - The validation of the request failed. Details can be found in **causes**.  
     * * `GENERAL_PARSING_ERROR` - The JSON syntax is invalid.  
     * 
     * **HTTP status code: 401**  
     * * `GENERAL_UNAUTHENTICATED` - Invalid or missing authentication credentials.  
     *   * `message` - An additional error message.  
     * 
     * **HTTP status code: 403**  
     * * `GENERAL_FORBIDDEN` - Insufficient access rights.  
     * * `GENERAL_QUOTA_EXCEEDED` - The transaction limit is exceeded.  
     *   * `message` - An additional error message.  
     * * `SEQUENCEOPTIMIZATION_RESTRICTION_EXCEEDED` - A product-specific restriction is exceeded.  
     * 
     * **HTTP status code: 404**  
     * * `GENERAL_RESOURCE_NOT_FOUND` - A requested resource does not exist.  
     *   * `message` - An additional error message.  
     * 
     * **HTTP status code: 429**  
     * * `GENERAL_RATE_LIMIT_EXCEEDED` - The rate limit is exceeded.  
     * 
     * **HTTP status code: 500**  
     * * `GENERAL_INTERNAL_SERVER_ERROR` - The request could not be processed due to an internal error.  
     *   * `message` - An additional error message.  
     *   * `hint` - A hint how to solve the problem.  
     * 
     * **HTTP status code: 503**  
     * * `GENERAL_SERVICE_UNAVAILABLE` - The service is temporarily unavailable..
     * @type {string}
     * @memberof ErrorResponse
     */
    errorCode: string;
    /**
     * A list of affected parameters and/or properties that caused this error.
     * @type {Array<CausingError>}
     * @memberof ErrorResponse
     */
    causes?: Array<CausingError>;
    /**
     * Additional properties specific to this error class.
     * @type {{ [key: string]: any; }}
     * @memberof ErrorResponse
     */
    details?: { [key: string]: any; };
}

export function ErrorResponseFromJSON(json: any): ErrorResponse {
    return ErrorResponseFromJSONTyped(json, false);
}

export function ErrorResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'traceId': json['traceId'],
        'errorId': !exists(json, 'errorId') ? undefined : json['errorId'],
        'description': json['description'],
        'errorCode': json['errorCode'],
        'causes': !exists(json, 'causes') ? undefined : ((json['causes'] as Array<any>).map(CausingErrorFromJSON)),
        'details': !exists(json, 'details') ? undefined : json['details'],
    };
}

export function ErrorResponseToJSON(value?: ErrorResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'traceId': value.traceId,
        'errorId': value.errorId,
        'description': value.description,
        'errorCode': value.errorCode,
        'causes': value.causes === undefined ? undefined : ((value.causes as Array<any>).map(CausingErrorToJSON)),
        'details': value.details,
    };
}

