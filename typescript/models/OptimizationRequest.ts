/* tslint:disable */
/* eslint-disable */
/**
 * Sequence Optimization
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Driver,
    DriverFromJSON,
    DriverFromJSONTyped,
    DriverToJSON,
} from './Driver';
import {
    Location,
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './Location';
import {
    Restrictions,
    RestrictionsFromJSON,
    RestrictionsFromJSONTyped,
    RestrictionsToJSON,
} from './Restrictions';
import {
    Stop,
    StopFromJSON,
    StopFromJSONTyped,
    StopToJSON,
} from './Stop';
import {
    Transport,
    TransportFromJSON,
    TransportFromJSONTyped,
    TransportToJSON,
} from './Transport';
import {
    Vehicle,
    VehicleFromJSON,
    VehicleFromJSONTyped,
    VehicleToJSON,
} from './Vehicle';

/**
 * An input object for the service method 'startAndCreateOptimizedRoute'.
 * @export
 * @interface OptimizationRequest
 */
export interface OptimizationRequest {
    /**
     * The list of depot or customer locations that may be referenced by the vehicle, transports and stops. A location is a place where goods have to be picked up or delivered, or where the vehicle is located. A location is either a depot location or a customer location. Depot locations may be found at start or end of **route-stops**. Each location must be referenced by another object. If a request contains a location not referenced by any other object, the request will be rejected.
     * @type {Array<Location>}
     * @memberof OptimizationRequest
     */
    locations: Array<Location>;
    /**
     * 
     * @type {Vehicle}
     * @memberof OptimizationRequest
     */
    vehicle?: Vehicle;
    /**
     * 
     * @type {Driver}
     * @memberof OptimizationRequest
     */
    driver: Driver;
    /**
     * The list of transports, that is, orders to transport goods from one location to another location. Depending on your subscription, a more restrictive value for maximum number of transport may apply. Check request limits of your subscription.
     * @type {Array<Transport>}
     * @memberof OptimizationRequest
     */
    transports: Array<Transport>;
    /**
     * The route containing a sequence of stops. It specifies where and in which order goods are to be picked up or delivered. Each stop is at a specific location, either a customer location or a depot location. At a customer location, transports are scheduled in order of their type: pickups after deliveries. The sequence of pickups and deliveries is always sorted by Last In - First Out (LIFO). At a depot location a stop groups either pickups or deliveries. A (partial) route already containing the corresponding stops at depot and/or customer locations can be input here. If stops are specified, the **Restrictions** should be set accordingly.
     * @type {Array<Stop>}
     * @memberof OptimizationRequest
     */
    route?: Array<Stop>;
    /**
     * 
     * @type {Restrictions}
     * @memberof OptimizationRequest
     */
    restrictions?: Restrictions;
}

export function OptimizationRequestFromJSON(json: any): OptimizationRequest {
    return OptimizationRequestFromJSONTyped(json, false);
}

export function OptimizationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): OptimizationRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'locations': ((json['locations'] as Array<any>).map(LocationFromJSON)),
        'vehicle': !exists(json, 'vehicle') ? undefined : VehicleFromJSON(json['vehicle']),
        'driver': DriverFromJSON(json['driver']),
        'transports': ((json['transports'] as Array<any>).map(TransportFromJSON)),
        'route': !exists(json, 'route') ? undefined : ((json['route'] as Array<any>).map(StopFromJSON)),
        'restrictions': !exists(json, 'restrictions') ? undefined : RestrictionsFromJSON(json['restrictions']),
    };
}

export function OptimizationRequestToJSON(value?: OptimizationRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'locations': ((value.locations as Array<any>).map(LocationToJSON)),
        'vehicle': VehicleToJSON(value.vehicle),
        'driver': DriverToJSON(value.driver),
        'transports': ((value.transports as Array<any>).map(TransportToJSON)),
        'route': value.route === undefined ? undefined : ((value.route as Array<any>).map(StopToJSON)),
        'restrictions': RestrictionsToJSON(value.restrictions),
    };
}

