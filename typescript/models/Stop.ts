/* tslint:disable */
/* eslint-disable */
/**
 * Sequence Optimization
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Event,
    EventFromJSON,
    EventFromJSONTyped,
    EventToJSON,
} from './Event';
import {
    StopReport,
    StopReportFromJSON,
    StopReportFromJSONTyped,
    StopReportToJSON,
} from './StopReport';
import {
    Violation,
    ViolationFromJSON,
    ViolationFromJSONTyped,
    ViolationToJSON,
} from './Violation';
import {
    WayReport,
    WayReportFromJSON,
    WayReportFromJSONTyped,
    WayReportToJSON,
} from './WayReport';

/**
 * A stop groups subsequent pickups and/or deliveries at the same location. At a customer location, transports are scheduled in order of their type: pickups after deliveries. At a depot location a stop groups either pickups or deliveries.
 * 
 * See [here](./concepts/route-sections-and-position-route) for more information.
 * @export
 * @interface Stop
 */
export interface Stop {
    /**
     * A reference to a location. Usually, goods are picked up or delivered here. If no goods are picked up or delivered, it is the location where a route starts or ends.
     * @type {string}
     * @memberof Stop
     */
    locationId: string;
    /**
     * A list of transport IDs that are delivered at this stop.
     * @type {Array<string>}
     * @memberof Stop
     */
    deliveryIds?: Array<string>;
    /**
     * A list of transport IDs that are picked up at this stop.
     * @type {Array<string>}
     * @memberof Stop
     */
    pickupIds?: Array<string>;
    /**
     * A way report contains a summary of the values of the events on the way from the previous stop to the current stop, including the driving time. The very first stop of a route has a way report with empty values.
     * @type {WayReport}
     * @memberof Stop
     */
    readonly reportForWayToStop: WayReport | null;
    /**
     * A stop report contains a summary of the values of the events at a stop, including the arrival time, the departure time and the service time. It also contains information about the loaded quantities when leaving the current stop.
     * @type {StopReport}
     * @memberof Stop
     */
    readonly reportForStop: StopReport | null;
    /**
     * A list of events that occur on the way from the previous stop to this stop. An event specifies what happens on a route at a certain point in time. It can describe the driver's activity such as driving or break.
     * @type {Array<Event>}
     * @memberof Stop
     */
    readonly eventsOnWayToStop: Array<Event>;
    /**
     * A list of events that occur at this stop. An event specifies what happens on a route at a certain point in time. It can describe the driver's activity such as performing service or waiting, or it can denote the start/end of a route.
     * @type {Array<Event>}
     * @memberof Stop
     */
    readonly eventsAtStop: Array<Event>;
    /**
     * A list of violations that occur on the way from the previous stop to this stop. The following violation types can occur here: DRIVER_AVAILABILITY, MAXIMUM_TRAVEL_TIME_OF_DRIVER, MAXIMUM_DRIVING_TIME_OF_DRIVER. For each violation, the maximum time exceedance on the way to this stop is reported.
     * @type {Array<Violation>}
     * @memberof Stop
     */
    readonly violationsOnWayToStop: Array<Violation>;
    /**
     * A list of violations that occur at this stop. The following violation types can occur here: DRIVER_AVAILABILITY, OPENING_INTERVAL, VEHICLE_CAPACITY, MAXIMUM_TRAVEL_TIME_OF_DRIVER. For VEHICLE_CAPACITY the violation when leaving the stop is reported (i.e., at the last stop of the route, when everything is unloaded, there will be no such violation). For all other violations, the maximum time exceedance at this stop is reported.
     * @type {Array<Violation>}
     * @memberof Stop
     */
    readonly violationsAtStop: Array<Violation>;
}

export function StopFromJSON(json: any): Stop {
    return StopFromJSONTyped(json, false);
}

export function StopFromJSONTyped(json: any, ignoreDiscriminator: boolean): Stop {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'locationId': json['locationId'],
        'deliveryIds': !exists(json, 'deliveryIds') ? undefined : json['deliveryIds'],
        'pickupIds': !exists(json, 'pickupIds') ? undefined : json['pickupIds'],
        'reportForWayToStop': WayReportFromJSON(json['reportForWayToStop']),
        'reportForStop': StopReportFromJSON(json['reportForStop']),
        'eventsOnWayToStop': ((json['eventsOnWayToStop'] as Array<any>).map(EventFromJSON)),
        'eventsAtStop': ((json['eventsAtStop'] as Array<any>).map(EventFromJSON)),
        'violationsOnWayToStop': ((json['violationsOnWayToStop'] as Array<any>).map(ViolationFromJSON)),
        'violationsAtStop': ((json['violationsAtStop'] as Array<any>).map(ViolationFromJSON)),
    };
}

export function StopToJSON(value?: Stop | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'locationId': value.locationId,
        'deliveryIds': value.deliveryIds,
        'pickupIds': value.pickupIds,
    };
}

